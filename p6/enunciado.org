#+LANGUAGE: es
#+LATEX_HEADER: \usepackage[AUTO]{babel}
#+TITLE: Simulación de autómatas finitos
#+DATE:
* Autómatas finitos
Los autómatas finitos proporcionan un sistema de computación, en el que, a partir de una 
entrada, devuelven verdadero o falso.
#+begin_src dot :file ejemplo.png :cmdline -Tpng :exports none :results silent
digraph automata{
	q0 [peripheries=2];
	q2 [peripheries=2];
	q0 -> q1 [label= "0"];
	q0 -> q0 [label= "1"];
	q1 -> q2 [label = "0"];
	q1 -> q1 [label = "1"];
	q2 -> q2 [label = "1"];
	q2 -> q1 [label = "0"];
}
#+end_src
#+CAPTION:Autómata finito con tres estados 
#+ATTR_LATEX: :width 0.10\linewidth
[[file:ejemplo.png]]
En este caso, el estado de inicio es $q0$  y, con la entrada $0011$ se
devuelve verdadero. La computación completa podría ser la siguiente:

$$
(q0, 0011)\implies (q1, 011)\implies (q2, 11) \implies (q2, 1)\implies (q2, \lamdba).  
$$
* Primera pregunta
Programad con CLIPS un conjunto de reglas lógicas, de forma que, dada
una entrada, se imprima por pantalla si el autómata dado en el
apartado anterior acepta la entrada.


* Segunda pregunta
El mismo problema si el autómata deja de ser determinista. 
#+begin_src dot :file ejemplo2.png :cmdline -Tpng :exports none :results silent
digraph automata{
	q0 [peripheries=2];
	q2 [peripheries=2];
	q0 -> q1 [label= "0"];
	q0 -> q0 [label= "0,1"];
	q1 -> q2 [label = "0"];
}
#+end_src 
[[file:ejemplo2.png]]
Además, como tarea adicional, se puede mejorar el código anterior, En vez de definir
una regla para cada transición, definid una regla que sirva para todas las transiciones. 
Para ello es necesario definir las transciones como hechos, como se puede ver en el siguiente ejemplo:
#+BEGIN_SRC clips
(assert (q0 1 q0))
(assert (q0 0 q1))
(assert (q0 0 q1))
(assert (q1 0 q2))
#+END_SRC
y escribir una única regla que utilice estos hechos como transiciones. Para ello, se menciona que cuando una
variable esta definida en la parte izquierda de la regla, queda ligada. Esto es, que el valor que 
toma ya esta asignado. Se puede consultar el libro de la bibliografía «CLIPS User's Guide», página 44.

* Tercera pregunta
La tercera pregunta trata de encontrar una palabra que sea aceptado por un autómata. Se pide que se escriba un programa
que dada una representación de un autómata, devuelva una palabra que se acepte por el autómata en caso de existir. El programa
no puede entrar en bucle infinito para ninguna entrada. 
