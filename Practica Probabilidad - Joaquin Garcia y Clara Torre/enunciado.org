#+LANGUAGE: es
#+LATEX_HEADER: \usepackage[AUTO]{babel}
#+TITLE: «Pagerank»
#+DATE:
Pagerank es un algoritmo para puntuar la importancia de una página web utilizando 
un modelo probabilístico del comportamiento de los usuarios en la web. 
Primero se modelan las páginas web conocidas mediante un grafo dirigido donde una 
página web esta unida a otra si hay un enlace dentro de esa página.

El usuario navega por las páginas web aleatoriamente, saltando de una página web a 
otra en cada unidad de tiempo eligiendo aleatoriamente uno de los enlaces. 
Además, cada enlace tiene una probabilidad de ser elegido.

En el siguiente ejemplo, vemos una representación gráfica de tres páginas web 
con sus enlaces. 

#+begin_src dot :file ejemplo.png :cmdline -Tpng :exports none :results silent
digraph g{
	pagina_A -> pagina_B [label="0.5"];
	pagina_A -> pagina_C [label="0.5"];
	pagina_B -> pagina_C [label="0.5"];
	pagina_B -> pagina_A [label="0.5"];
	pagina_C -> pagina_A [label="1"];	
}
#+end_src
#+CAPTION: 
#+ATTR_LATEX: :width 0.50\linewidth
[[file:ejemplo.png]]

La distribución de los usuarios esta dada por una distribución de probabilidad 
que depende del tiempo. 

Supongamos que en tiempo cero, la distribución de probabilidad de estar en cada
una de las páginas es (0.1, 0.2,0.7).
Según el modelo matemático, denotando la probabilidad de estar en la pagina A en 
el momento t como P(A(t)), tenemos que

P(A(t))= P(A(t)|B(t-1))P(B(t-1)) + P(A(t)|C(t-1))P(C(t-1)),

P(B(t))= P(B(t)|A(t-1))P(A(t-1)) + P(B(t)|C(t-1))P(C(t-1)).

P(C(t))= P(C(t)|A(t-1))P(A(t-1)) + P(C(t)|B(t-1))P(B(t-1)).

El siguiente código demuestra como calcular las diferentes iteraciones para el 
ejemplo anterior.

#+BEGIN_SRC python :session mysession
import numpy as np

M = np.array([[0,0.5,0.5],
              [0.5,0,0.5],
              [1,0,0]
])

v = np.array([0.1,0.1,0.8])
v= np.matmul(v,M)
print(v)
#+END_SRC

#+RESULTS:
: [0.85 0.05 0.1 ]
* Primera pregunta
Modificar el código anterior para calcular que pasará después de que pasen 
suficientes unidades de tiempo. ¿A qué tienden las probabilidades?

#+BEGIN_SRC python :session prueba
import numpy as np

#Tiempo
t = 1000

M = np.array([[0.0,0.5,0.5],
              [0.5,0.0,0.5],
              [1.0,0.0,0.0]])

v = np.array([0.1,0.2,0.7])

for i in range(t):
	v= np.matmul(v,M)
print(v)
#+END_SRC

#+RESULTS:
: [0.44444444 0.22222222 0.33333333]

Estas probabilidades miden la importancia de las páginas web y permiten
establecer su importancia.

¿Qué pasa si se cambia la distribución inicial de los usuarios? 
Haced una prueba con una distribución diferente y comprobad si se tienden a 
distribuir igual después de varias iteraciones.

Ocurre lo mismo al cabo de las suficientes iteraciones. Con 1000 unidades de tiempo, 
un numero muy alto, la distribucion es la misma. Hemos probado con varias distribuciones,
como [0,0.1,0.9] y [0.6,0.3,0.1]. 

* Segunda pregunta

En PageRank los enlaces de las páginas web tienen una distribución uniforme 
respecto del evento de ser elegidos por el usuario, es decir se suele dar a 
cada enlace de la página la probabilidad de uno dividido entre el número 
total de enlaces. 

Si una página no tiene enlaces, se supone que los usuarios se quedan 
indefinidamente en la página. Calculad la importancia de cada una de 
estás páginas, independientemente de la distribución de los usuarios.

#+begin_src dot :file ejemplo2.png :cmdline -Tpng :exports none :results silent
digraph g{
	pagina_A -> {pagina_B,pagina_C};
	pagina_B -> {pagina_C,pagina_A};
	pagina_C ->{pagina_D};
	
}
#+end_src
#+CAPTION: 
#+ATTR_LATEX: :width 0.50\linewidth
[[file:ejemplo2.png]]

La matriz de importancia de cada pagina es 1/numero de enlaces. La pagina A tiene dos enlaces.
La pagina B tiene dos enlaces. La pagica C tiene un enlace. La pagina D no tiene enlaces.
La matriz resultante es: 

M = [[0.0,0.5,0.5,0.0],
	 [0.5,0.0,0.5,0.0],
	 [0.0,0.0,0.0,1.0],
	 [0.0,0.0,0.0,1.0]]

La importancia tras un tiempo **infinito** es la siguiente:
[0.0, 0.0, 0.0, 1.0]

* Tercera pregunta

En los ejemplos anteriores, independientemente de la distribución inicial 
de los usuarios, la distribución final de los usuarios **cuando el tiempo tiende a infinito**
es la misma pero esto no siempre es así.

Poned ejemplos de:
- Una serie de páginas web, que dependiendo de la distribución inicial de 
los usuarios den resultados distintos para la importancia de la página. 
#+begin_src dot :file respuesta1.png :cmdline -Tpng :exports none :results silent
digraph g{
	pagina_A -> {pagina_B,pagina_C};
	pagina_B -> {pagina_D,pagina_E};
	pagina_C -> {pagina_F,pagina_G};
	pagina_D -> {pagina_E};
	pagina_F -> {pagina_G};
}
#+end_src
#+CAPTION: 
#+ATTR_LATEX: :width 0.50\linewidth
[[file:respuesta1.png]]

- Otro ejemplo donde no exista limite cuando el tiempo tienda a infinito.

#+begin_src dot :file respuesta2.png :cmdline -Tpng :exports none :results silent
digraph g{
	pagina_A -> {pagina_B};
	pagina_B -> {pagina_C};
	pagina_C -> {pagina_A};
}
#+end_src
#+CAPTION: 
#+ATTR_LATEX: :width 0.50\linewidth
[[file:respuesta2.png]]

Estos ejemplos tienen que estar escritos en lenguaje dot.
* Cuarta pregunta

Una forma de evitar estos problemas es definir una constante $d$ que representa
una probabilidad de ir a una página cualquiera. Es decir, con una probabilidad de $d$
el usuario elige una página al azar. En este caso, se puede demostrar 
que siempre se converge para cualquier probabilidad inicial.

Se pide dar la importancia de las páginas dadas en el ejercicio 3.

Para el primer grafo la matriz de importancias es la siguiente:
M = [[0.0,0.5,0.5,0.0,0.0,0.0,0.0],
	 [0.0,0.0,0.0,0.5,0.5,0.0,0.0],
	 [0.0,0.0,0.0,0.0,0.0,0.5,0.5],
	 [0.0,0.0,0.0,0.0,1.0,0.0,0.0],
	 [0.0,0.0,0.0,0.0,1.0,0.0,0.0],
	 [0.0,0.0,0.0,0.0,0.0,0.0,1.0],
	 [0.0,0.0,0.0,0.0,0.0,0.0,1.0]]

La importancia tras un tiempo **infinito** es la siguiente:
[0.02857143 0.04 0.04 0.04457143 0.40114286 0.04457143 0.40114286] para un d=0.2

No se puede obtener una conclusion clara devido a que hay una perdida de decimales
al dividir 1/7, que son los nodos del grafo en cuestion.

Para el segundo grafo la matriz de importancias es la siguiente:
M = [[0.0,1.0,0.0,0.0],
	 [0.0,0.0,1.0,0.0],
	 [0.0,0.0,0.0,1.0],
	 [1.0,0.0,0.0,0.0]]

La importancia tras un tiempo **infinito** es la siguiente:
[0.25 0.25 0.25 0.25] para un d = 0.2

Para este ejercicio, hemos hecho una matriz llamada Md que contiene la probabilidad
de que el usuario entre en las paginas directamente, que es 1/numero de paginas, 
sin necesidad de enlaces, regida por la constante $d$. 

Por ejemplo, para el segundo grafo, la matriz Md seria la siguiente:
Md = [[0.25,0.25,0.25,0.25],
	 [0.25,0.25,0.25,0.25],
	 [0.25,0.25,0.25,0.25],
	 [0.25,0.25,0.25,0.25]]

El calculo que hemos hecho para encontrar las importancias es el siguiente:
Mv = (1-d)*M + d*Md
siendo d la constante, Md la matriz explicada, M la matriz proporcionada arriba 
de las importancias iniciales, y Mv el resultado del calculo, que es lo que 
multiplicamos por v en el bucle. En el archivo prueba.py hemos incluido un ejemplo
con el segundo grafo para una mas comoda comprension del calculo.